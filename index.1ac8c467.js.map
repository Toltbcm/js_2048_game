{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.status = \"idle\";\n        this.score = 0;\n        this.state = initialState;\n        this.initialState = JSON.parse(JSON.stringify(initialState));\n        this.moveLeft = this.wrapMove(this.moveLeft);\n        this.moveRight = this.wrapMove(this.moveRight);\n        this.moveUp = this.wrapMove(this.moveUp);\n        this.moveDown = this.wrapMove(this.moveDown);\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"wrapMove\",\n            value: function wrapMove(move) {\n                return (function() {\n                    if (this.status !== \"playing\") return;\n                    var oldStateJson = JSON.stringify(this.state);\n                    move.apply(this);\n                    if (this.has2048()) return;\n                    if (JSON.stringify(this.state) !== oldStateJson) this.addCellToState();\n                    this.hasMove();\n                }).bind(this);\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                for(var y = 0; y < Game.GAME_SIZE; y++){\n                    var newRow = [];\n                    var allowToAdd = true;\n                    for(var x = 0; x < Game.GAME_SIZE; x++){\n                        if (this.state[y][x] === 0) continue;\n                        if (x === 0 || !allowToAdd || this.state[y][x] !== newRow[newRow.length - 1]) {\n                            newRow.push(this.state[y][x]);\n                            allowToAdd = true;\n                            continue;\n                        }\n                        newRow[newRow.length - 1] += this.state[y][x];\n                        this.score += newRow[newRow.length - 1];\n                        allowToAdd = false;\n                    }\n                    while(newRow.length < Game.GAME_SIZE)newRow.push(0);\n                    this.state[y] = newRow;\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var maxIndex = Game.GAME_SIZE - 1;\n                for(var y = maxIndex; y >= 0; y--){\n                    var newRow = [];\n                    var allowToAdd = true;\n                    for(var x = maxIndex; x >= 0; x--){\n                        if (this.state[y][x] === 0) continue;\n                        if (x === maxIndex || !allowToAdd || this.state[y][x] !== newRow[0]) {\n                            newRow.unshift(this.state[y][x]);\n                            allowToAdd = true;\n                            continue;\n                        }\n                        newRow[0] += this.state[y][x];\n                        this.score += newRow[0];\n                        allowToAdd = false;\n                    }\n                    while(newRow.length < Game.GAME_SIZE)newRow.unshift(0);\n                    this.state[y] = newRow;\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                for(var x = 0; x < Game.GAME_SIZE; x++){\n                    var newColumn = [];\n                    var allowToAdd = true;\n                    for(var y = 0; y < Game.GAME_SIZE; y++){\n                        if (this.state[y][x] === 0) continue;\n                        if (y === 0 || !allowToAdd || this.state[y][x] !== newColumn[newColumn.length - 1]) {\n                            newColumn.push(this.state[y][x]);\n                            allowToAdd = true;\n                            continue;\n                        }\n                        newColumn[newColumn.length - 1] += this.state[y][x];\n                        this.score += newColumn[newColumn.length - 1];\n                        allowToAdd = false;\n                    }\n                    for(var y1 = 0; y1 < Game.GAME_SIZE; y1++)this.state[y1][x] = newColumn[y1] ? newColumn[y1] : 0;\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var maxIndex = Game.GAME_SIZE - 1;\n                for(var x = maxIndex; x >= 0; x--){\n                    var newColumn = [];\n                    var allowToAdd = true;\n                    for(var y = maxIndex; y >= 0; y--){\n                        if (this.state[y][x] === 0) continue;\n                        if (y === maxIndex || !allowToAdd || this.state[y][x] !== newColumn[0]) {\n                            newColumn.unshift(this.state[y][x]);\n                            allowToAdd = true;\n                            continue;\n                        }\n                        newColumn[0] += this.state[y][x];\n                        this.score += newColumn[0];\n                        allowToAdd = false;\n                    }\n                    for(var y1 = maxIndex; y1 >= 0; y1--){\n                        var index = y1 - (Game.GAME_SIZE - newColumn.length);\n                        this.state[y1][x] = newColumn[index] ? newColumn[index] : 0;\n                    }\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.initializeState();\n                this.status = \"playing\";\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.score = 0;\n                this.state = JSON.parse(JSON.stringify(this.initialState));\n            }\n        },\n        {\n            key: \"getRandomPosition\",\n            value: function getRandomPosition() {\n                return Math.floor(Math.random() * Game.GAME_SIZE);\n            }\n        },\n        {\n            key: \"getRandomValue\",\n            value: function getRandomValue() {\n                return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"addCellToState\",\n            value: function addCellToState() {\n                if (!this.hasEmptyCell()) return;\n                var x;\n                var y;\n                do {\n                    x = this.getRandomPosition();\n                    y = this.getRandomPosition();\n                }while (this.state[y][x] !== 0);\n                this.state[y][x] = this.getRandomValue();\n            }\n        },\n        {\n            key: \"initializeState\",\n            value: function initializeState() {\n                this.addCellToState();\n                this.addCellToState();\n            }\n        },\n        {\n            key: \"hasEmptyCell\",\n            value: function hasEmptyCell() {\n                for(var y = 0; y < Game.GAME_SIZE; y++){\n                    if (this.state[y].includes(0)) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"has2048\",\n            value: function has2048() {\n                for(var y = 0; y < Game.GAME_SIZE; y++)if (this.state[y].includes(2048)) {\n                    this.status = \"win\";\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"hasMove\",\n            value: function hasMove() {\n                var maxIndex = Game.GAME_SIZE - 1;\n                for(var y = 0; y < Game.GAME_SIZE; y++){\n                    if (this.state[y].includes(0)) return true;\n                    for(var x = 0; x < Game.GAME_SIZE; x++){\n                        if (x !== maxIndex && this.state[y][x] === this.state[y][x + 1] || y !== maxIndex && this.state[y][x] === this.state[y + 1][x]) return true;\n                    }\n                }\n                this.status = \"lose\";\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"GAME_SIZE\", 4);\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$gameField = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".button.start\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\n$197cd56b15c33885$var$fillField();\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$startButton.classList.contains(\"start\")) $197cd56b15c33885$var$startGame();\n    else $197cd56b15c33885$var$restartGame();\n});\ndocument.body.addEventListener(\"keydown\", $197cd56b15c33885$var$moveListener);\nfunction $197cd56b15c33885$var$startGame() {\n    $197cd56b15c33885$var$startButton.className = \"button restart\";\n    $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$fillField();\n    $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$restartGame() {\n    $197cd56b15c33885$var$startButton.className = \"button start\";\n    $197cd56b15c33885$var$startButton.textContent = \"Start\";\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$fillField();\n    $197cd56b15c33885$var$startMessage.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n    $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$moveListener(e) {\n    switch(e.code){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n    }\n    $197cd56b15c33885$var$fillField();\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") {\n        $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n        document.body.removeEventListener(\"keydown\", $197cd56b15c33885$var$moveListener);\n    } else if ($197cd56b15c33885$var$game.getStatus() === \"lose\") {\n        $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n        document.body.removeEventListener(\"keydown\", $197cd56b15c33885$var$moveListener);\n    }\n}\nfunction $197cd56b15c33885$var$fillField() {\n    for(var y = 0; y < $3d28d7f1aac198f5$exports.GAME_SIZE; y++)for(var x = 0; x < $3d28d7f1aac198f5$exports.GAME_SIZE; x++){\n        if ($197cd56b15c33885$var$game.getState()[y][x] === 0) {\n            $197cd56b15c33885$var$gameField.rows[y].cells[x].className = \"field-cell\";\n            $197cd56b15c33885$var$gameField.rows[y].cells[x].textContent = \"\";\n            continue;\n        }\n        $197cd56b15c33885$var$gameField.rows[y].cells[x].className = \"field-cell field-cell--\".concat($197cd56b15c33885$var$game.getState()[y][x]);\n        $197cd56b15c33885$var$gameField.rows[y].cells[x].textContent = $197cd56b15c33885$var$game.getState()[y][x];\n    }\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.getScore();\n}\n\n})();\n//# sourceMappingURL=index.1ac8c467.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst gameField = document.querySelector('.game-field');\nconst startButton = document.querySelector('.button.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst score = document.querySelector('.game-score');\n\nfillField();\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startGame();\n  } else {\n    restartGame();\n  }\n});\n\ndocument.body.addEventListener('keydown', moveListener);\n\nfunction startGame() {\n  startButton.className = 'button restart';\n  startButton.textContent = 'Restart';\n  game.start();\n  fillField();\n  startMessage.classList.add('hidden');\n}\n\nfunction restartGame() {\n  startButton.className = 'button start';\n  startButton.textContent = 'Start';\n  game.restart();\n  fillField();\n  startMessage.classList.remove('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n}\n\nfunction moveListener(e) {\n  switch (e.code) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  fillField();\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n    document.body.removeEventListener('keydown', moveListener);\n  } else if (game.getStatus() === 'lose') {\n    loseMessage.classList.remove('hidden');\n    document.body.removeEventListener('keydown', moveListener);\n  }\n}\n\nfunction fillField() {\n  for (let y = 0; y < Game.GAME_SIZE; y++) {\n    for (let x = 0; x < Game.GAME_SIZE; x++) {\n      if (game.getState()[y][x] === 0) {\n        gameField.rows[y].cells[x].className = `field-cell`;\n        gameField.rows[y].cells[x].textContent = '';\n        continue;\n      }\n\n      gameField.rows[y].cells[x].className =\n        `field-cell field-cell--${game.getState()[y][x]}`;\n      gameField.rows[y].cells[x].textContent = game.getState()[y][x];\n    }\n  }\n\n  score.textContent = game.getScore();\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static GAME_SIZE = 4;\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = 'idle';\n    this.score = 0;\n    this.state = initialState;\n    this.initialState = JSON.parse(JSON.stringify(initialState));\n    this.moveLeft = this.wrapMove(this.moveLeft);\n    this.moveRight = this.wrapMove(this.moveRight);\n    this.moveUp = this.wrapMove(this.moveUp);\n    this.moveDown = this.wrapMove(this.moveDown);\n  }\n\n  wrapMove(move) {\n    return function () {\n      if (this.status !== 'playing') {\n        return;\n      }\n\n      const oldStateJson = JSON.stringify(this.state);\n\n      move.apply(this);\n\n      if (this.has2048()) {\n        return;\n      }\n\n      if (JSON.stringify(this.state) !== oldStateJson) {\n        this.addCellToState();\n      }\n      this.hasMove();\n    }.bind(this);\n  }\n\n  moveLeft() {\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      const newRow = [];\n      let allowToAdd = true;\n\n      for (let x = 0; x < Game.GAME_SIZE; x++) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (\n          x === 0 ||\n          !allowToAdd ||\n          this.state[y][x] !== newRow[newRow.length - 1]\n        ) {\n          newRow.push(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newRow[newRow.length - 1] += this.state[y][x];\n        this.score += newRow[newRow.length - 1];\n        allowToAdd = false;\n      }\n\n      while (newRow.length < Game.GAME_SIZE) {\n        newRow.push(0);\n      }\n      this.state[y] = newRow;\n    }\n  }\n\n  moveRight() {\n    const maxIndex = Game.GAME_SIZE - 1;\n\n    for (let y = maxIndex; y >= 0; y--) {\n      const newRow = [];\n      let allowToAdd = true;\n\n      for (let x = maxIndex; x >= 0; x--) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (x === maxIndex || !allowToAdd || this.state[y][x] !== newRow[0]) {\n          newRow.unshift(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newRow[0] += this.state[y][x];\n        this.score += newRow[0];\n        allowToAdd = false;\n      }\n\n      while (newRow.length < Game.GAME_SIZE) {\n        newRow.unshift(0);\n      }\n      this.state[y] = newRow;\n    }\n  }\n\n  moveUp() {\n    for (let x = 0; x < Game.GAME_SIZE; x++) {\n      const newColumn = [];\n      let allowToAdd = true;\n\n      for (let y = 0; y < Game.GAME_SIZE; y++) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (\n          y === 0 ||\n          !allowToAdd ||\n          this.state[y][x] !== newColumn[newColumn.length - 1]\n        ) {\n          newColumn.push(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newColumn[newColumn.length - 1] += this.state[y][x];\n        this.score += newColumn[newColumn.length - 1];\n        allowToAdd = false;\n      }\n\n      for (let y = 0; y < Game.GAME_SIZE; y++) {\n        this.state[y][x] = newColumn[y] ? newColumn[y] : 0;\n      }\n    }\n  }\n\n  moveDown() {\n    const maxIndex = Game.GAME_SIZE - 1;\n\n    for (let x = maxIndex; x >= 0; x--) {\n      const newColumn = [];\n      let allowToAdd = true;\n\n      for (let y = maxIndex; y >= 0; y--) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (\n          y === maxIndex ||\n          !allowToAdd ||\n          this.state[y][x] !== newColumn[0]\n        ) {\n          newColumn.unshift(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newColumn[0] += this.state[y][x];\n        this.score += newColumn[0];\n        allowToAdd = false;\n      }\n\n      for (let y = maxIndex; y >= 0; y--) {\n        const index = y - (Game.GAME_SIZE - newColumn.length);\n\n        this.state[y][x] = newColumn[index] ? newColumn[index] : 0;\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.initializeState();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n  }\n\n  getRandomPosition() {\n    return Math.floor(Math.random() * Game.GAME_SIZE);\n  }\n\n  getRandomValue() {\n    return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n  }\n\n  addCellToState() {\n    if (!this.hasEmptyCell()) {\n      return;\n    }\n\n    let x;\n    let y;\n\n    do {\n      x = this.getRandomPosition();\n      y = this.getRandomPosition();\n    } while (this.state[y][x] !== 0);\n\n    this.state[y][x] = this.getRandomValue();\n  }\n\n  initializeState() {\n    this.addCellToState();\n    this.addCellToState();\n  }\n\n  hasEmptyCell() {\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      if (this.state[y].includes(0)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  has2048() {\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      if (this.state[y].includes(2048)) {\n        this.status = 'win';\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  hasMove() {\n    const maxIndex = Game.GAME_SIZE - 1;\n\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      if (this.state[y].includes(0)) {\n        return true;\n      }\n\n      for (let x = 0; x < Game.GAME_SIZE; x++) {\n        if (\n          (x !== maxIndex && this.state[y][x] === this.state[y][x + 1]) ||\n          (y !== maxIndex && this.state[y][x] === this.state[y + 1][x])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    this.status = 'lose';\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["key","$3d28d7f1aac198f5$exports","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","status","score","state","JSON","parse","stringify","moveLeft","wrapMove","moveRight","moveUp","moveDown","value","move","oldStateJson","apply","has2048","addCellToState","hasMove","bind","y","GAME_SIZE","newRow","allowToAdd","x","push","maxIndex","unshift","newColumn","y1","index","initializeState","Math","floor","random","hasEmptyCell","getRandomPosition","getRandomValue","includes","$4fc75ccb937ab1df$var$_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","obj","$197cd56b15c33885$var$game","$197cd56b15c33885$var$gameField","document","querySelector","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$score","$197cd56b15c33885$var$fillField","getState","rows","cells","className","textContent","concat","getScore","addEventListener","classList","contains","start","add","restart","remove","body","$197cd56b15c33885$var$moveListener","e","code","getStatus","removeEventListener"],"version":3,"file":"index.1ac8c467.js.map"}
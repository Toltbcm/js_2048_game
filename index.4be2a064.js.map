{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static GAME_SIZE = 4;\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = \"idle\";\n        this.score = 0;\n        this.state = initialState;\n        this.initialState = JSON.parse(JSON.stringify(initialState));\n        this.moveLeft = this.wrapMove(this.moveLeft);\n        this.moveRight = this.wrapMove(this.moveRight);\n        this.moveUp = this.wrapMove(this.moveUp);\n        this.moveDown = this.wrapMove(this.moveDown);\n    }\n    wrapMove(move) {\n        return (function() {\n            if (this.status !== \"playing\") return;\n            const oldStateJson = JSON.stringify(this.state);\n            move.apply(this);\n            if (this.has2048()) return;\n            if (JSON.stringify(this.state) !== oldStateJson) this.addCellToState();\n            this.hasMove();\n        }).bind(this);\n    }\n    moveLeft() {\n        for(let y = 0; y < $a5fd07fa01589658$var$Game.GAME_SIZE; y++){\n            const newRow = [];\n            let allowToAdd = true;\n            for(let x = 0; x < $a5fd07fa01589658$var$Game.GAME_SIZE; x++){\n                if (this.state[y][x] === 0) continue;\n                if (x === 0 || !allowToAdd || this.state[y][x] !== newRow[newRow.length - 1]) {\n                    newRow.push(this.state[y][x]);\n                    allowToAdd = true;\n                    continue;\n                }\n                newRow[newRow.length - 1] += this.state[y][x];\n                this.score += newRow[newRow.length - 1];\n                allowToAdd = false;\n            }\n            while(newRow.length < $a5fd07fa01589658$var$Game.GAME_SIZE)newRow.push(0);\n            this.state[y] = newRow;\n        }\n    }\n    moveRight() {\n        const maxIndex = $a5fd07fa01589658$var$Game.GAME_SIZE - 1;\n        for(let y = maxIndex; y >= 0; y--){\n            const newRow = [];\n            let allowToAdd = true;\n            for(let x = maxIndex; x >= 0; x--){\n                if (this.state[y][x] === 0) continue;\n                if (x === maxIndex || !allowToAdd || this.state[y][x] !== newRow[0]) {\n                    newRow.unshift(this.state[y][x]);\n                    allowToAdd = true;\n                    continue;\n                }\n                newRow[0] += this.state[y][x];\n                this.score += newRow[0];\n                allowToAdd = false;\n            }\n            while(newRow.length < $a5fd07fa01589658$var$Game.GAME_SIZE)newRow.unshift(0);\n            this.state[y] = newRow;\n        }\n    }\n    moveUp() {\n        for(let x = 0; x < $a5fd07fa01589658$var$Game.GAME_SIZE; x++){\n            const newColumn = [];\n            let allowToAdd = true;\n            for(let y = 0; y < $a5fd07fa01589658$var$Game.GAME_SIZE; y++){\n                if (this.state[y][x] === 0) continue;\n                if (y === 0 || !allowToAdd || this.state[y][x] !== newColumn[newColumn.length - 1]) {\n                    newColumn.push(this.state[y][x]);\n                    allowToAdd = true;\n                    continue;\n                }\n                newColumn[newColumn.length - 1] += this.state[y][x];\n                this.score += newColumn[newColumn.length - 1];\n                allowToAdd = false;\n            }\n            for(let y = 0; y < $a5fd07fa01589658$var$Game.GAME_SIZE; y++)this.state[y][x] = newColumn[y] ? newColumn[y] : 0;\n        }\n    }\n    moveDown() {\n        const maxIndex = $a5fd07fa01589658$var$Game.GAME_SIZE - 1;\n        for(let x = maxIndex; x >= 0; x--){\n            const newColumn = [];\n            let allowToAdd = true;\n            for(let y = maxIndex; y >= 0; y--){\n                if (this.state[y][x] === 0) continue;\n                if (y === maxIndex || !allowToAdd || this.state[y][x] !== newColumn[0]) {\n                    newColumn.unshift(this.state[y][x]);\n                    allowToAdd = true;\n                    continue;\n                }\n                newColumn[0] += this.state[y][x];\n                this.score += newColumn[0];\n                allowToAdd = false;\n            }\n            for(let y = maxIndex; y >= 0; y--){\n                const index = y - ($a5fd07fa01589658$var$Game.GAME_SIZE - newColumn.length);\n                this.state[y][x] = newColumn[index] ? newColumn[index] : 0;\n            }\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.initializeState();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.score = 0;\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n    }\n    getRandomPosition() {\n        return Math.floor(Math.random() * $a5fd07fa01589658$var$Game.GAME_SIZE);\n    }\n    getRandomValue() {\n        return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n    }\n    addCellToState() {\n        if (!this.hasEmptyCell()) return;\n        let x;\n        let y;\n        do {\n            x = this.getRandomPosition();\n            y = this.getRandomPosition();\n        }while (this.state[y][x] !== 0);\n        this.state[y][x] = this.getRandomValue();\n    }\n    initializeState() {\n        this.addCellToState();\n        this.addCellToState();\n    }\n    hasEmptyCell() {\n        for(let y = 0; y < $a5fd07fa01589658$var$Game.GAME_SIZE; y++){\n            if (this.state[y].includes(0)) return true;\n        }\n        return false;\n    }\n    has2048() {\n        for(let y = 0; y < $a5fd07fa01589658$var$Game.GAME_SIZE; y++)if (this.state[y].includes(2048)) {\n            this.status = \"win\";\n            return true;\n        }\n        return false;\n    }\n    hasMove() {\n        const maxIndex = $a5fd07fa01589658$var$Game.GAME_SIZE - 1;\n        for(let y = 0; y < $a5fd07fa01589658$var$Game.GAME_SIZE; y++){\n            if (this.state[y].includes(0)) return true;\n            for(let x = 0; x < $a5fd07fa01589658$var$Game.GAME_SIZE; x++){\n                if (x !== maxIndex && this.state[y][x] === this.state[y][x + 1] || y !== maxIndex && this.state[y][x] === this.state[y + 1][x]) return true;\n            }\n        }\n        this.status = \"lose\";\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$fillField();\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) $09e991522ca7e64e$var$startGame();\n    else $09e991522ca7e64e$var$restartGame();\n});\ndocument.body.addEventListener(\"keydown\", $09e991522ca7e64e$var$moveListener);\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$startButton.className = \"button restart\";\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$fillField();\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$startButton.className = \"button start\";\n    $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$fillField();\n    $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$moveListener(e) {\n    switch(e.code){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$fillField();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        document.body.removeEventListener(\"keydown\", $09e991522ca7e64e$var$moveListener);\n    } else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n        document.body.removeEventListener(\"keydown\", $09e991522ca7e64e$var$moveListener);\n    }\n}\nfunction $09e991522ca7e64e$var$fillField() {\n    for(let y = 0; y < $a5fd07fa01589658$exports.GAME_SIZE; y++)for(let x = 0; x < $a5fd07fa01589658$exports.GAME_SIZE; x++){\n        if ($09e991522ca7e64e$var$game.getState()[y][x] === 0) {\n            $09e991522ca7e64e$var$gameField.rows[y].cells[x].className = `field-cell`;\n            $09e991522ca7e64e$var$gameField.rows[y].cells[x].textContent = \"\";\n            continue;\n        }\n        $09e991522ca7e64e$var$gameField.rows[y].cells[x].className = `field-cell field-cell--${$09e991522ca7e64e$var$game.getState()[y][x]}`;\n        $09e991522ca7e64e$var$gameField.rows[y].cells[x].textContent = $09e991522ca7e64e$var$game.getState()[y][x];\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n}\n\n\n//# sourceMappingURL=index.4be2a064.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst gameField = document.querySelector('.game-field');\nconst startButton = document.querySelector('.button.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst score = document.querySelector('.game-score');\n\nfillField();\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startGame();\n  } else {\n    restartGame();\n  }\n});\n\ndocument.body.addEventListener('keydown', moveListener);\n\nfunction startGame() {\n  startButton.className = 'button restart';\n  startButton.textContent = 'Restart';\n  game.start();\n  fillField();\n  startMessage.classList.add('hidden');\n}\n\nfunction restartGame() {\n  startButton.className = 'button start';\n  startButton.textContent = 'Start';\n  game.restart();\n  fillField();\n  startMessage.classList.remove('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n}\n\nfunction moveListener(e) {\n  switch (e.code) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  fillField();\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n    document.body.removeEventListener('keydown', moveListener);\n  } else if (game.getStatus() === 'lose') {\n    loseMessage.classList.remove('hidden');\n    document.body.removeEventListener('keydown', moveListener);\n  }\n}\n\nfunction fillField() {\n  for (let y = 0; y < Game.GAME_SIZE; y++) {\n    for (let x = 0; x < Game.GAME_SIZE; x++) {\n      if (game.getState()[y][x] === 0) {\n        gameField.rows[y].cells[x].className = `field-cell`;\n        gameField.rows[y].cells[x].textContent = '';\n        continue;\n      }\n\n      gameField.rows[y].cells[x].className =\n        `field-cell field-cell--${game.getState()[y][x]}`;\n      gameField.rows[y].cells[x].textContent = game.getState()[y][x];\n    }\n  }\n\n  score.textContent = game.getScore();\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static GAME_SIZE = 4;\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = 'idle';\n    this.score = 0;\n    this.state = initialState;\n    this.initialState = JSON.parse(JSON.stringify(initialState));\n    this.moveLeft = this.wrapMove(this.moveLeft);\n    this.moveRight = this.wrapMove(this.moveRight);\n    this.moveUp = this.wrapMove(this.moveUp);\n    this.moveDown = this.wrapMove(this.moveDown);\n  }\n\n  wrapMove(move) {\n    return function () {\n      if (this.status !== 'playing') {\n        return;\n      }\n\n      const oldStateJson = JSON.stringify(this.state);\n\n      move.apply(this);\n\n      if (this.has2048()) {\n        return;\n      }\n\n      if (JSON.stringify(this.state) !== oldStateJson) {\n        this.addCellToState();\n      }\n      this.hasMove();\n    }.bind(this);\n  }\n\n  moveLeft() {\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      const newRow = [];\n      let allowToAdd = true;\n\n      for (let x = 0; x < Game.GAME_SIZE; x++) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (\n          x === 0 ||\n          !allowToAdd ||\n          this.state[y][x] !== newRow[newRow.length - 1]\n        ) {\n          newRow.push(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newRow[newRow.length - 1] += this.state[y][x];\n        this.score += newRow[newRow.length - 1];\n        allowToAdd = false;\n      }\n\n      while (newRow.length < Game.GAME_SIZE) {\n        newRow.push(0);\n      }\n      this.state[y] = newRow;\n    }\n  }\n\n  moveRight() {\n    const maxIndex = Game.GAME_SIZE - 1;\n\n    for (let y = maxIndex; y >= 0; y--) {\n      const newRow = [];\n      let allowToAdd = true;\n\n      for (let x = maxIndex; x >= 0; x--) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (x === maxIndex || !allowToAdd || this.state[y][x] !== newRow[0]) {\n          newRow.unshift(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newRow[0] += this.state[y][x];\n        this.score += newRow[0];\n        allowToAdd = false;\n      }\n\n      while (newRow.length < Game.GAME_SIZE) {\n        newRow.unshift(0);\n      }\n      this.state[y] = newRow;\n    }\n  }\n\n  moveUp() {\n    for (let x = 0; x < Game.GAME_SIZE; x++) {\n      const newColumn = [];\n      let allowToAdd = true;\n\n      for (let y = 0; y < Game.GAME_SIZE; y++) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (\n          y === 0 ||\n          !allowToAdd ||\n          this.state[y][x] !== newColumn[newColumn.length - 1]\n        ) {\n          newColumn.push(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newColumn[newColumn.length - 1] += this.state[y][x];\n        this.score += newColumn[newColumn.length - 1];\n        allowToAdd = false;\n      }\n\n      for (let y = 0; y < Game.GAME_SIZE; y++) {\n        this.state[y][x] = newColumn[y] ? newColumn[y] : 0;\n      }\n    }\n  }\n\n  moveDown() {\n    const maxIndex = Game.GAME_SIZE - 1;\n\n    for (let x = maxIndex; x >= 0; x--) {\n      const newColumn = [];\n      let allowToAdd = true;\n\n      for (let y = maxIndex; y >= 0; y--) {\n        if (this.state[y][x] === 0) {\n          continue;\n        }\n\n        if (\n          y === maxIndex ||\n          !allowToAdd ||\n          this.state[y][x] !== newColumn[0]\n        ) {\n          newColumn.unshift(this.state[y][x]);\n          allowToAdd = true;\n          continue;\n        }\n\n        newColumn[0] += this.state[y][x];\n        this.score += newColumn[0];\n        allowToAdd = false;\n      }\n\n      for (let y = maxIndex; y >= 0; y--) {\n        const index = y - (Game.GAME_SIZE - newColumn.length);\n\n        this.state[y][x] = newColumn[index] ? newColumn[index] : 0;\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.initializeState();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n  }\n\n  getRandomPosition() {\n    return Math.floor(Math.random() * Game.GAME_SIZE);\n  }\n\n  getRandomValue() {\n    return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n  }\n\n  addCellToState() {\n    if (!this.hasEmptyCell()) {\n      return;\n    }\n\n    let x;\n    let y;\n\n    do {\n      x = this.getRandomPosition();\n      y = this.getRandomPosition();\n    } while (this.state[y][x] !== 0);\n\n    this.state[y][x] = this.getRandomValue();\n  }\n\n  initializeState() {\n    this.addCellToState();\n    this.addCellToState();\n  }\n\n  hasEmptyCell() {\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      if (this.state[y].includes(0)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  has2048() {\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      if (this.state[y].includes(2048)) {\n        this.status = 'win';\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  hasMove() {\n    const maxIndex = Game.GAME_SIZE - 1;\n\n    for (let y = 0; y < Game.GAME_SIZE; y++) {\n      if (this.state[y].includes(0)) {\n        return true;\n      }\n\n      for (let x = 0; x < Game.GAME_SIZE; x++) {\n        if (\n          (x !== maxIndex && this.state[y][x] === this.state[y][x + 1]) ||\n          (y !== maxIndex && this.state[y][x] === this.state[y + 1][x])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    this.status = 'lose';\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","GAME_SIZE","constructor","initialState","status","score","state","JSON","parse","stringify","moveLeft","wrapMove","moveRight","moveUp","moveDown","move","oldStateJson","apply","has2048","addCellToState","hasMove","bind","y","newRow","allowToAdd","x","length","push","maxIndex","unshift","newColumn","index","getScore","getState","getStatus","start","initializeState","restart","getRandomPosition","Math","floor","random","getRandomValue","hasEmptyCell","includes","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$gameField","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$fillField","rows","cells","className","textContent","addEventListener","classList","contains","add","remove","body","$09e991522ca7e64e$var$moveListener","e","code","removeEventListener"],"version":3,"file":"index.4be2a064.js.map"}